#!/usr/bin/env python3
"""
Pentest Toolkit Main Script

This script serves as the entry point for the penetration testing toolkit.
It provides a command-line interface (CLI) to run various modules such as
the port scanner and brute forcer.

Usage:
    python pentest_toolkit.py <module> [options]

Modules:
    port_scanner    Scan a target host for open TCP ports.
    brute_forcer    Attempt brute-force login using a username and a list of passwords.

Remember: Use responsibly and only on systems you are authorized to test.
"""

import argparse
import sys

# Import modules from the modules package
from modules import port_scanner, brute_forcer

def main():
    parser = argparse.ArgumentParser(
        description="Penetration Testing Toolkit (Educational Purpose Only)"
    )
    subparsers = parser.add_subparsers(
        title="Modules",
        description="Valid modules",
        dest="module",
        required=True,
    )

    # Port Scanner Subparser
    scanner_parser = subparsers.add_parser(
        "port_scanner", help="Scan a target host for open TCP ports."
    )
    scanner_parser.add_argument(
        "-t", "--target", type=str, required=True, help="Target host IP or domain."
    )
    scanner_parser.add_argument(
        "--start-port", type=int, default=1, help="Starting port number (default: 1)."
    )
    scanner_parser.add_argument(
        "--end-port", type=int, default=1024, help="Ending port number (default: 1024)."
    )
    scanner_parser.add_argument(
        "-T", "--threads", type=int, default=100, help="Number of threads to use."
    )

    # Brute Forcer Subparser
    brute_parser = subparsers.add_parser(
        "brute_forcer", help="Attempt brute-force login using a username and password list."
    )
    brute_parser.add_argument(
        "-t", "--target", type=str, required=True, help="Target service URL or IP."
    )
    brute_parser.add_argument(
        "-u", "--username", type=str, required=True, help="Username to attempt login."
    )
    brute_parser.add_argument(
        "-p", "--password-list", type=str, required=True, help="Path to file containing password list."
    )
    brute_parser.add_argument(
        "--timeout", type=float, default=5.0, help="Timeout for each attempt in seconds (default: 5)."
    )

    args = parser.parse_args()

    if args.module == "port_scanner":
        port_scanner.scan_target(
            target=args.target,
            start_port=args.start_port,
            end_port=args.end_port,
            threads=args.threads,
        )
    elif args.module == "brute_forcer":
        brute_forcer.run_brute_force(
            target=args.target,
            username=args.username,
            password_file=args.password_list,
            timeout=args.timeout,
        )
    else:
        print("Module not recognized!")
        sys.exit(1)

if __name__ == "__main__":
    main()
